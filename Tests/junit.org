* Chamar um método de uma classe mockada como se ela não estivesse mockada
when(myClass.method()).thenCallRealMethod();
* Exemplo de testes de Enums 
** Classe main

public class ClockingTypeConstants {

    public static final Long REGISTERED = 1L;
    public static final Long NOT_REGISTERED = 2L;
    public static final Long ADJUSTED = 3L;
    public static final Long CANCELED = 4L;
    public static final Long DEVICE_NOT_AUTHORIZED = 5L;
    public static final Long INVALID_TIME = 6L;
    public static final Long DUPLICATE = 7L;
    public static final Long PRE_SIGNED = 8L;
    public static final Long VIRTUAL = 9L;
    public static final Long CHECKPOINT = 10L;

    private ClockingTypeConstants(){}
}
** classe de testes
package com.nexti.operationdesk.util;

import helper.TestUnitHelper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ClockingTypeConstantsTest extends TestUnitHelper {

    @Test
    void deveRetornarTipoDeClockingRegistered() {
        assertEquals(1L, ClockingTypeConstants.REGISTERED);
    }

    @Test
    void deveRetornarTipoDeClockingNotRegistered() {
        assertEquals(2L, ClockingTypeConstants.NOT_REGISTERED);
    }

    @Test
    void deveRetornarTipoDeClockingAdjusted() {
        assertEquals(3L, ClockingTypeConstants.ADJUSTED);
    }

    @Test
    void deveRetornarTipoDeClockingCanceled() {
        assertEquals(4L, ClockingTypeConstants.CANCELED);
    }

    @Test
    void deveRetornarTipoDeClockingDeviceNotAuthorized() {
        assertEquals(5L, ClockingTypeConstants.DEVICE_NOT_AUTHORIZED);
    }

    @Test
    void deveRetornarTipoDeClockingInvalidTime() {
        assertEquals(6L, ClockingTypeConstants.INVALID_TIME);
    }

    @Test
    void deveRetornarTipoDeClockingDuplicate() {
        assertEquals(7L, ClockingTypeConstants.DUPLICATE);
    }

    @Test
    void deveRetornarTipoDeClockingPreSigned() {
        assertEquals(8L, ClockingTypeConstants.PRE_SIGNED);
    }

    @Test
    void deveRetornarTipoDeClockingVirtual() {
        assertEquals(9L, ClockingTypeConstants.VIRTUAL);
    }

    @Test
    void deveRetornarTipoDeClockingCheckpoint() {
        assertEquals(10L, ClockingTypeConstants.CHECKPOINT);
    }

}

** Métodos que capturam lançamentos de exceções
*** classe main

    public void set(String key, Object jsonParseableObject, long ttlInSeconds) {
        if (StringUtils.isBlank(key) || jsonParseableObject == null) {
            LOGGER.error("Invalid object");
            return;
        }
        try {
            String jsonString = objectMapper.writeValueAsString(jsonParseableObject);
            redisTemplate.opsForValue().set(key, jsonString, ttlInSeconds, TimeUnit.SECONDS);
            LOGGER.info("Cached Key: {} Value: {}", key, jsonString);
        } catch (JsonProcessingException e) {
            throw new BusinessException(e.getMessage());
        } catch (RedisConnectionFailureException e){
            LOGGER.error("Redis Connection Error. ", e);
        }
    }
*** teste
    @Test
    void deveLancarExcecaoNoMetodoSetAoFalharAoConverterObjetoParaString() throws JsonProcessingException {
        var key = "testKey";
        var jsonParseableObject =  "[{\"type\":\"CLIENTTYPE\",\"id\":2},{\"type\":\"SERVICETYPE\",\"id\":34}]";;
        var ttlInSeconds = 60;
        when(objectMapper.writeValueAsString(anyString())).thenThrow(new JsonProcessingException("JSON_PROCESSING_FAILED") {});

        assertThatThrownBy(() -> service.set(key, jsonParseableObject, ttlInSeconds))
                .isInstanceOf(BusinessException.class)
                .hasMessage("JSON_PROCESSING_FAILED");
        verify(redisTemplate, never()).opsForValue();
    }

* Verifique se a operação assíncrona foi concluída com sucesso (sem exceções)
  assertTrue(reponseCompletableFuture.isDone());
  assertFalse(reponseCompletableFuture.isCompletedExceptionally());
* Mockito
** Precisa ter na classe de testes
@ExtendWith(MockitoExtension.class)
class WorkplaceServiceTests {

* JUnit 5
Segundo colega de trabalho não tem como mockar método static no junit 5.
** testar lançamento de exceção
esses 2 modos funcionam:
    Mockito.doThrow(new RuntimeException()).when(workplaceRepository)
                        .countWorkplaces(anyLong(), anyLong(), any());

    when(workplaceRepository.countWorkplaces( anyLong(), anyLong(), any()))
                .thenThrow(new RuntimeException());
** Teste de CompletableFuture
    assertTrue(reponseCompletableFuture.isDone());
    assertFalse(reponseCompletableFuture.isCompletedExceptionally());
    assertNotNull(response);
    
* Assertions gerais
** 1

		var expected = Map.of(personReplacement1.getAbsenteeId(), personReplacement1,
							  personReplacement2.getAbsenteeId(), personReplacement2,
							  personReplacement3.getAbsenteeId(), personReplacement3);
		when(repo.findReplacementPersonByWorkplaceIds(any(), anyList())).thenReturn(replacements);
		var response = service.getReplacementPersonByWorkplaceIds(date, List.of(1L, 2L));
		assertThat(response.get(), hasEntry(personReplacement1.getAbsenteeId(), personReplacement1));
		assertThat(response.get(), hasEntry(personReplacement2.getAbsenteeId(), personReplacement2));
		assertThat(response.get(), hasEntry(personReplacement3.getAbsenteeId(), personReplacement3));
		assertThat(response.get(), allOf(hasKey(personReplacement1.getAbsenteeId()), hasKey(personReplacement2.getAbsenteeId()), hasKey(personReplacement3.getAbsenteeId())));
		assertThat(response.get(), allOf(hasValue(personReplacement1), hasValue(personReplacement2), hasValue(personReplacement3)));
		assertEquals(response.get().size(), expected.size()); 
** 2
	void deveRetornarMapaComColaboradoresAdicionadosAEstruturaDePostos() {
		// Given
		PersonSimplifiedDto person1 = new PersonSimplifiedDto(1L);
		person1.setWorkplaceId(111L);
		personReplacement2.setWorkplaceId(111L);
		personReplacement3.setWorkplaceId(111L);
		PersonSimplifiedDto person2 = new PersonSimplifiedDto();
		person2.setId(personReplacement2.getPersonId());
		PersonSimplifiedDto person3 = new PersonSimplifiedDto();
		person3.setId(personReplacement3.getPersonId());
		Map<Long, ReplacementDto> replacementDtoByAbsenteeId = Map.of(personReplacement2.getAbsenteeId(), personReplacement2);
		List<ReplacementDto> workplaceReplacements = List.of(personReplacement3);
		Map<Long, PersonSimplifiedDto> personDtoByPersonId = Map.of(person1.getId(), person1);
		Map<Long, WorkplaceSimplifiedDto> workplaceDtoByWorkplaceId = Map.of(workplace.getId(), workplace);
		// When
		service.addAllPersonsToInsideWorkplaceMap(workplaceDtoByWorkplaceId, personDtoByPersonId,
												  replacementDtoByAbsenteeId, workplaceReplacements);
		// Then
		assertThat(workplaceDtoByWorkplaceId.get(workplace.getId()).getPersons()).containsExactlyInAnyOrderElementsOf(List.of(person2, person3));		
** 3

		var expectedMap = Map.of(workplaceDto1.getId(), workplaceDto1,
				workplaceDto2.getId(), workplaceDto2, workplaceDto3.getId(), workplaceDto3);
		var responseMap = service.makeMapWorkplaceDtoByWorkplaceId(clientSet);
		assertThat(responseMap, hasEntry(workplaceDto1.getId(), workplaceDto1));
		assertThat(responseMap, hasEntry(workplaceDto2.getId(), workplaceDto2));
		assertThat(responseMap, hasEntry(workplaceDto3.getId(), workplaceDto3));
		assertThat(responseMap, allOf(hasKey(workplaceDto1.getId()), hasKey(workplaceDto2.getId()), hasKey(workplaceDto3.getId())));
		assertThat(responseMap, allOf(hasKey(workplaceDto1.getId()), hasKey(workplaceDto2.getId()), hasKey(workplaceDto3.getId())));
		assertThat(responseMap, allOf(hasValue(workplaceDto1), hasValue(workplaceDto2), hasValue(workplaceDto3)));
		assertEquals(responseMap.size(), expectedMap.size());
	}
	
		assertThat(workplaceIds, containsInAnyOrder(workplace1Id, workplace2Id, workplace3Id));
		assertEquals(workplaceIds.size(), workplaceDtoList.size());	
* JUnit
Para dentro de um teste unitário consiguir acessar métodos/objetos de dentro de um pacote específico da pasta main, precisamos setar o pacote do teste como o mesmo pacote raiz do main.

* Casos a serem considerar de testar
- Casos extremos
- Casos mínimos
- Casos padrões

- Casos de sucesso
- Casos de falha
* faker
     import com.github.javafaker.Faker;
     static Faker faker = new Faker();
     var filterTypeUserEnum = faker.options().option(FilterTypeUserEnum.class); // escolhe aleatoriamente um dos elementos de uma classe Enum



    @Test
    void deveCriarShiftSimpleDtoValido() {
        Long id = faker.number().randomNumber();
        String shiftName = faker.lorem().sentence()
                + String.format(" %02d:%02d - %02d:%02d", faker.random().nextInt(24), faker.random().nextInt(60),
                                                          faker.random().nextInt(24), faker.random().nextInt(60));
        String fullName = faker.name().fullName();
        String streetAddress = faker.address().streetAddress();
        String city = faker.address().city();
        String randomNumber1 = faker.numerify("#");
        String randomNumber2 = faker.numerify("##");
        String randomNumber3 = faker.numerify("###");
        String randomNumber4 = faker.numerify("####");

        String url = faker.internet().url();
        String img = faker.avatar().image();

        String personEnrolment = faker.lorem().characters(10);
        boolean boleano = faker.bool().bool();
        Date data = faker.date().birthday();
        String randomNumbersLetters = faker.bothify("numeros ## e letras ??");
        ClockingTypeEnum clockingTypeEnum = faker.options().option(ClockingTypeEnum.class);

        Integer i1 = faker.random().nextInt(16); // é utilizada para gerar um número inteiro aleatório entre 0 e 15
        Integer i2 = faker.random().nextInt(10, 18); // gera um número aleatório entre 16 e 17
        Double d1 = faker.random().nextDouble();
        long l1 = faker.random().nextLong();

        String randomLetters1 = faker.letterify("?");
        String randomLetters2 = faker.letterify("??");
        String randomLetters3 = faker.letterify("???");

        String cep = faker.regexify("\\d{5}-\\d{3}"); // Gera um CEP no formato "XXXXX-XXX"
        String RG = faker.regexify("\\d{2}\\.\\d{3}\\.\\d{3}-\\d"); // Gera um RG no formato "XX.XXX.XXX-X"
        String CPF = faker.regexify("\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}"); // Gera um CPF no formato "XXX.XXX.XXX-XX"

        String lorem = faker.lorem().sentence();
        String justName = faker.name().name();
	}
* @ParameterizedTest
class ClockingTypeEnumTest extends TestUnitHelper {
    @ParameterizedTest
    @MethodSource("validDataProvider")
    void deveRetornarOTipoDeClockingPeloClockingId(Long clockingTypeId, ClockingTypeEnum expected) {
        // When
        var actual = ClockingTypeEnum.getClokingType(clockingTypeId);
        // Then
        assertThat(actual).isEqualTo(expected);
    }
    @ParameterizedTest
    @MethodSource("inValidDataProvider")
    void deveRetornar_OTipoDeClockingPeloClockingId(Long clockingTypeId, ClockingTypeEnum expected) {
        // When
        var actual = assertThrows(NotFoundException.class,
                () -> ClockingTypeEnum.getClokingType(clockingTypeId));

        // Then
        assertThat(actual).isInstanceOf(NotFoundException.class);
        assertThat(actual.getMessage()).isEqualTo("CLOCKING_TYPE_ID");
    }

    }
    private static Stream<Arguments> inValidDataProvider() {
        return Stream.of(
                Arguments.arguments(10L, REGISTERED),
                Arguments.arguments(20L, NOT_REGISTERED),
                Arguments.arguments(30L, ADJUSTED),
                Arguments.arguments(50L, DEVICE_NOT_AUTHORIZED),
                Arguments.arguments(0L, INVALID_TIME),
                Arguments.arguments(null, PRE_SIGNED)
        );
    }
    private static Stream<Arguments> validDataProvider() {
        return Stream.of(
                Arguments.arguments(1L, REGISTERED),
                Arguments.arguments(2L, NOT_REGISTERED),
                Arguments.arguments(3L, ADJUSTED),
                Arguments.arguments(5L, DEVICE_NOT_AUTHORIZED),
                Arguments.arguments(6L, INVALID_TIME),
                Arguments.arguments(8L, PRE_SIGNED)
        );
    }
* @ParameterizedTest 2

    @ParameterizedTest
    @MethodSource("invalidDataProvider")
    void deveRetornarFalsoQuandoAlgumCampoForDiferente(PersonLoadDto other) {
        // Given
        var id = 1L;
        var name = "name";
        var personConditionEnum = PersonConditionEnum.ABSENTEE;
        var replacementId = 1L;
        var enrolment = "99";
        var dto = new PersonLoadDto(id, name, personConditionEnum, replacementId, enrolment);
        // When
        boolean actual = dto.equals(other);
        // Then
        assertThat(actual).isFalse();
    }
    private static Stream<Arguments> invalidDataProvider() {
        var id = 1L;
        var name = "name";
        var personConditionEnum = PersonConditionEnum.ABSENTEE;
        var replacementId = 1L;
        var enrolment = "99";
        return Stream.of(
                Arguments.arguments(new PersonLoadDto(10L, name, personConditionEnum, replacementId, enrolment)),
                Arguments.arguments(new PersonLoadDto(10L, "invalid", personConditionEnum, replacementId, enrolment)),
                Arguments.arguments(new PersonLoadDto(10L, name, PersonConditionEnum.EFFECTIVE, replacementId, enrolment)),
                Arguments.arguments(new PersonLoadDto(10L, name, personConditionEnum, 10L, enrolment)),
                Arguments.arguments(new PersonLoadDto(id, "invalid", personConditionEnum, replacementId, enrolment)),
                Arguments.arguments(new PersonLoadDto(id, "invalid", PersonConditionEnum.EFFECTIVE, replacementId, enrolment)),
                Arguments.arguments(new PersonLoadDto(id, "invalid", personConditionEnum, 10L, enrolment)),
                Arguments.arguments(new PersonLoadDto(id, name, PersonConditionEnum.EFFECTIVE, replacementId, enrolment)),
                Arguments.arguments(new PersonLoadDto(id, name, PersonConditionEnum.EFFECTIVE, 10L, enrolment)),
                Arguments.arguments(new PersonLoadDto(id, name, personConditionEnum, 10L, enrolment))
        );
    }
* Exemplo de teste de dto

    @Test
    void deveCriarComentarioResponseQuePermiteSerExcluido() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileName = "googlelogo_color_272x92dp.png";
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto dto = new OPDWorkplaceCommentDto(commentId,
                                                                description,
                                                                userAccountAvatar,
                                                                operationDeskAvatarUrl,
                                                                userAccountName,
                                                                registerDate,
                                                                fileUrl,
                                                                commentTypeEnum);
        // When
        OPDCommentResponseDto actual =
                new OPDCommentResponseDto(dto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // Then
        assertThat(actual.getCommentId()).isEqualTo(commentId);
        assertThat(actual.getDescription()).hasToString(description);
        assertThat(actual.getUserAccountAvatar()).hasToString(userAccountAvatar);
        assertThat(actual.getUserAccountName()).hasToString(userAccountName);
        assertThat(actual.getRegisterDate()).isEqualTo(registerDate);
        assertThat(actual.getFileName()).hasToString(fileName);
        assertThat(actual.getFileUrl()).hasToString(fileUrl);
        assertThat(actual.getAllowDelete()).isTrue();
    }
    @Test
    void deveCriarComentarioResponseQueNaoPermiteSerExcluidoPelaConfiguracaoDoCliente() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileName = "googlelogo_color_272x92dp.png";
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = false;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto dto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                userAccountName,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        // When
        OPDCommentResponseDto actual =
                new OPDCommentResponseDto(dto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // Then
        assertThat(actual.getCommentId()).isEqualTo(commentId);
        assertThat(actual.getDescription()).hasToString(description);
        assertThat(actual.getUserAccountAvatar()).hasToString(userAccountAvatar);
        assertThat(actual.getUserAccountName()).hasToString(userAccountName);
        assertThat(actual.getRegisterDate()).isEqualTo(registerDate);
        assertThat(actual.getFileName()).hasToString(fileName);
        assertThat(actual.getFileUrl()).hasToString(fileUrl);
        assertThat(actual.getAllowDelete()).isFalse();
    }
    @Test
    void deveCriarComentarioResponseComOrigemDoCampoOperationDeskAvatarUrl() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileName = "googlelogo_color_272x92dp.png";
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = true;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto dto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        // When
        OPDCommentResponseDto actual =
                new OPDCommentResponseDto(dto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // Then
        assertThat(actual.getCommentId()).isEqualTo(commentId);
        assertThat(actual.getDescription()).hasToString(description);
        assertThat(actual.getUserAccountAvatar()).hasToString(operationDeskAvatarUrl);
        assertThat(actual.getUserAccountName()).hasToString(userAccountName);
        assertThat(actual.getRegisterDate()).isEqualTo(registerDate);
        assertThat(actual.getFileName()).hasToString(fileName);
        assertThat(actual.getFileUrl()).hasToString(fileUrl);
        assertThat(actual.getAllowDelete()).isTrue();
    }
    @Test
    void deveCriarComentarioResponseComOrigemDoCampoAvatarUrl() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileName = "googlelogo_color_272x92dp.png";
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto dto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        // When
        OPDCommentResponseDto actual =
                new OPDCommentResponseDto(dto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // Then
        assertThat(actual.getCommentId()).isEqualTo(commentId);
        assertThat(actual.getDescription()).hasToString(description);
        assertThat(actual.getUserAccountAvatar()).hasToString(userAccountAvatar);
        assertThat(actual.getUserAccountName()).hasToString(userAccountName);
        assertThat(actual.getRegisterDate()).isEqualTo(registerDate);
        assertThat(actual.getFileName()).hasToString(fileName);
        assertThat(actual.getFileUrl()).hasToString(fileUrl);
        assertThat(actual.getAllowDelete()).isTrue();
    }
    @Test
    void deveRetornarComentarioResponseIgualQuandoOutroObjetoForIgual() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // When
        boolean actual = dto.equals(dto);
        // Then
        assertThat(actual).isTrue();
    }
    @Test
    void deveRetornarFalsoQuandoOutroObjetoForNulo() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // When
        boolean actual = dto.equals(null);
        // Then
        assertThat(actual).isFalse();
    }
    @Test
    void deveRetornarFalsoQuandoOutroObjetoForDiferente() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        Integer other = new Integer("1");
        // When
        boolean actual = dto.equals(other);
        // Then
        assertThat(actual).isFalse();
    }
    @Test
    void deveRetornarVerdadeiroQuandoIdComentarioERegistroDoComentarioForemIguais() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        OPDCommentResponseDto otherObject =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // When
        boolean actual = dto.equals(otherObject);
        // Then
        assertThat(actual).isTrue();
    }
    @Test
    void deveRetornarFalsoQuandoIdComentarioERegistroDoComentarioForemDiferente() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        OPDWorkplaceCommentDto other = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                new Date(2222L),
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto otherObject =
                new OPDCommentResponseDto(other, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // When
        boolean actual = dto.equals(otherObject);
        // Then
        assertThat(actual).isFalse();
    }
    @Test
    void deveRetornarFalsoQuandoIdComentarioForIgualERegistroDoComentarioForemIguais() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        OPDWorkplaceCommentDto other = new OPDWorkplaceCommentDto(222L,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto otherObject =
                new OPDCommentResponseDto(other, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        // When
        boolean actual = dto.equals(otherObject);
        // Then
        assertThat(actual).isFalse();
    }
    @Test
    void deveRetornarHashCodeValido() {
        // Given
        Long commentId =  12345L;
        String description = "Comentário de teste";
        String userAccountAvatar = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String operationDeskAvatarUrl = "https://s3.amazonaws.com/nexti-files/1/avatar/123/123.jpg";
        String userAccountName = "Fulano de Tal";
        Date registerDate = new Date(111111);
        String fileUrl = "https://www.google.com.br/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png";
        boolean isAllowDeletingCommentsFromWorkplace = true;
        boolean isOperationDeskAvatar = false;
        CommentTypeEnum commentTypeEnum = CommentTypeEnum.MANUAL;
        OPDWorkplaceCommentDto workplaceCommentDto = new OPDWorkplaceCommentDto(commentId,
                description,
                userAccountAvatar,
                operationDeskAvatarUrl,
                userAccountName,
                registerDate,
                fileUrl,
                commentTypeEnum);
        OPDCommentResponseDto dto =
                new OPDCommentResponseDto(workplaceCommentDto, isAllowDeletingCommentsFromWorkplace, isOperationDeskAvatar);
        int expected = Objects.hash(commentId, registerDate);
        // When
        int actual = dto.hashCode();
        // Then
        assertThat(actual).isEqualTo(expected);
    }
* Exemplos de testes  a serem considerados 
** de string de sql no core
src/test/java/com/nexti/core/server/repository/comment/sql/OPDMountSQLFindWorkplaceCommentTest.java
** de valores de parameters (src/test/java/com/nexti/core/server/service/comment/parameter/OPDMountQueryParameterWorkplaceCommentServiceTest.java)
    @Test
    void deveRetornarQueryParameterQueBuscaCommentariosDePostos() {
        // Given
        Long workplaceId = 1L;
        Pageable pageable = new PageRequest(0, 10, new Sort(Sort.Direction.DESC, "woc.register_date"));
        String searchTerm = "busca";
        OPDFindParamDto paramDto = new OPDFindParamDto(workplaceId, pageable, searchTerm);
        Long customerId = 1L;
        when(securityService.getLoggedCustomer()).thenReturn(new Customer(customerId));
        String expected = returnSqlFindWorkplaceComment();
        // When
        OPDQueryParameterDto actual = service.findByWorkplaceIdAndTerm(paramDto);
        // Then
        assertThat(actual.getSql()).hasToString(expected);
        assertThat(actual.getParameter().getValue("customer_id")).isEqualTo(customerId);
        assertThat(actual.getParameter().getValue("workplace_id")).isEqualTo(workplaceId);
        assertThat(actual.getParameter().getValue("observation")).isEqualTo("%"+searchTerm+"%");
        verify(securityService, times(1)).getLoggedCustomer();
    }
