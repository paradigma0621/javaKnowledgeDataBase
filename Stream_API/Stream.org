Java não é uma linguagem nativamente funcional (AP:não incorporava o paradigma de programação funcional), mas esses princípios da programação funcional foram acrescidos a partir do Java 8, com a adição da stream API.


Expressões lambdas (foco na função) e Streams usam o paradigma funcional (em oposição ao paradigma de orientação à objetos).
--------------------------------------------


Assim como o "forEach" é uma função terminadora, o "reduce" também é uma função terminadora - de modo que para esses dois não podemos continuar operando sobre a stream.

------------------------------------------

* Modos de percorrer uma lista
		List<String> aprovados = Arrays.asList("Lu", "Gui", "Luca", "Ana");
** foreach
		System.out.println("Usando o foreach...");
		for(String nome: aprovados) {
			System.out.println(nome);
		}
** Iterator		
		System.out.println("\nUsando Iterator...");
		Iterator<String> iterator = aprovados.iterator();
		while(iterator.hasNext()) { ///iterator.hasNext() retorna true toda vez que existe um próximo elemento
			System.out.println(iterator.next());
		}
** Stream		
		System.out.println("\nUsando Stream...");
		Stream<String> stream = aprovados.stream();
		stream.forEach(System.out::println); // Laço interno!!!
	}
** findFist

				Long responsePersonId = personReplacements.stream()
						.filter(r -> r.getAbsenteeId().equals(personId))
						.findFirst().get().getPersonId();
* processamentos de maps + optional
** transformar map em List + optional
List<Long> adjustmentReasonIds = Optional.ofNullable(peopleInformation.getMapClockings()).orElse(Collections.emptyMap())
				.values()
				.stream()
				.map(Map::values)
				.flatMap(Collection::stream)
				.flatMap(List::stream)
				.map(clocking -> clocking.getAdjustmentReason().getId())
				.distinct()
				.filter(Objects::nonNull)
				.collect(Collectors.toList());
** semelhante à acima + optional
List<Long> adjustmentReasonIds.addAll(Optional.ofNullable(peopleInformation.getMapCanceledClockings()).orElse(Collections.emptyMap())
				.values()
				.stream()
				.flatMap(Collection::stream)
				.map(clocking -> clocking.getAdjustmentReason().getId())
				.distinct()
				.filter(Objects::nonNull)
				.collect(Collectors.toList()));
* anyMatch() (obs: retorna um boolean)
** exemplo simples
if (personReplacements.stream().anyMatch(r -> r.getAbsenteeId().equals(personId)))
				responsePersonIds.add(workplaceReplacements.get(actualIndex).getPersonId());
** exemplo 2
            for (WorkplaceDto workplaceDto : workplaces)
            {
                filter.getWorkplaceIds().add(workplaceDto.getId());
                workplaceDto.setHasParticularities(
                        particularitiesIds.stream().filter(p -> p.getWorkplaceId().equals(workplaceDto.getId())).anyMatch(p -> p.getWorkplaceParticularityCategory() != null && p.getWorkplaceParticularityCategory().getOperationDeskSpotlight() != null));
            }
* material da Loiane
peguei no site: https://github.com/loiane/java8-tutorial/blob/master/README.md

#+BEGIN_SRC markdown
## Streams

A `java.util.Stream` represents a sequence of elements on which one or more operations can be performed. Stream operations are either _intermediate_ or _terminal_. While terminal operations return a result of a certain type, intermediate operations return the stream itself so you can chain multiple method calls in a row. Streams are created on a source, e.g. a `java.util.Collection` like lists or sets (maps are not supported). Stream operations can either be executed sequentially or parallely.

> Streams are extremely powerful, so I wrote a separate [Java 8 Streams Tutorial](http://winterbe.com/posts/2014/07/31/java8-stream-tutorial-examples/). **You should also check out [Sequency](https://github.com/winterbe/sequency) as a similiar library for the web.**

Let's first look how sequential streams work. First we create a sample source in form of a list of strings:

```java
List<String> stringCollection = new ArrayList<>();
stringCollection.add("ddd2");
stringCollection.add("aaa2");
stringCollection.add("bbb1");
stringCollection.add("aaa1");
stringCollection.add("bbb3");
stringCollection.add("ccc");
stringCollection.add("bbb2");
stringCollection.add("ddd1");
```

Collections in Java 8 are extended so you can simply create streams either by calling `Collection.stream()` or `Collection.parallelStream()`. The following sections explain the most common stream operations.

### Filter

Filter accepts a predicate to filter all elements of the stream. This operation is _intermediate_ which enables us to call another stream operation (`forEach`) on the result. ForEach accepts a consumer to be executed for each element in the filtered stream. ForEach is a terminal operation. It's `void`, so we cannot call another stream operation.

```java
stringCollection
    .stream()
    .filter((s) -> s.startsWith("a"))
    .forEach(System.out::println);

// "aaa2", "aaa1"
```

### Sorted

Sorted is an _intermediate_ operation which returns a sorted view of the stream. The elements are sorted in natural order unless you pass a custom `Comparator`.

```java
stringCollection
    .stream()
    .sorted()
    .filter((s) -> s.startsWith("a"))
    .forEach(System.out::println);

// "aaa1", "aaa2"
```

Keep in mind that `sorted` does only create a sorted view of the stream without manipulating the ordering of the backed collection. The ordering of `stringCollection` is untouched:

```java
System.out.println(stringCollection);
// ddd2, aaa2, bbb1, aaa1, bbb3, ccc, bbb2, ddd1
```

### Map

The _intermediate_ operation `map` converts each element into another object via the given function. The following example converts each string into an upper-cased string. But you can also use `map` to transform each object into another type. The generic type of the resulting stream depends on the generic type of the function you pass to `map`.

```java
stringCollection
    .stream()
    .map(String::toUpperCase)
    .sorted((a, b) -> b.compareTo(a))
    .forEach(System.out::println);

// "DDD2", "DDD1", "CCC", "BBB3", "BBB2", "AAA2", "AAA1"
```

### Match

Various matching operations can be used to check whether a certain predicate matches the stream. All of those operations are _terminal_ and return a boolean result.

```java
boolean anyStartsWithA =
    stringCollection
        .stream()
        .anyMatch((s) -> s.startsWith("a"));

System.out.println(anyStartsWithA);      // true

boolean allStartsWithA =
    stringCollection
        .stream()
        .allMatch((s) -> s.startsWith("a"));

System.out.println(allStartsWithA);      // false

boolean noneStartsWithZ =
    stringCollection
        .stream()
        .noneMatch((s) -> s.startsWith("z"));

System.out.println(noneStartsWithZ);      // true
```

#### Count

Count is a _terminal_ operation returning the number of elements in the stream as a `long`.

```java
long startsWithB =
    stringCollection
        .stream()
        .filter((s) -> s.startsWith("b"))
        .count();

System.out.println(startsWithB);    // 3
```


### Reduce

This _terminal_ operation performs a reduction on the elements of the stream with the given function. The result is an `Optional` holding the reduced value.

```java
Optional<String> reduced =
    stringCollection
        .stream()
        .sorted()
        .reduce((s1, s2) -> s1 + "#" + s2);

reduced.ifPresent(System.out::println);
// "aaa1#aaa2#bbb1#bbb2#bbb3#ccc#ddd1#ddd2"
```

## Parallel Streams

As mentioned above streams can be either sequential or parallel. Operations on sequential streams are performed on a single thread while operations on parallel streams are performed concurrently on multiple threads.

The following example demonstrates how easy it is to increase the performance by using parallel streams.

First we create a large list of unique elements:

```java
int max = 1000000;
List<String> values = new ArrayList<>(max);
for (int i = 0; i < max; i++) {
    UUID uuid = UUID.randomUUID();
    values.add(uuid.toString());
}
```

Now we measure the time it takes to sort a stream of this collection.

### Sequential Sort

```java
long t0 = System.nanoTime();

long count = values.stream().sorted().count();
System.out.println(count);

long t1 = System.nanoTime();

long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);
System.out.println(String.format("sequential sort took: %d ms", millis));

// sequential sort took: 899 ms
```

### Parallel Sort

```java
long t0 = System.nanoTime();

long count = values.parallelStream().sorted().count();
System.out.println(count);

long t1 = System.nanoTime();

long millis = TimeUnit.NANOSECONDS.toMillis(t1 - t0);
System.out.println(String.format("parallel sort took: %d ms", millis));

// parallel sort took: 472 ms
```

As you can see both code snippets are almost identical but the parallel sort is roughly 50% faster. All you have to do is change `stream()` to `parallelStream()`.
#+END_SRC
* exemplo de uso de .map
achei interessante pois tem o "return productOption" dentro do map
        List<ProductOption> productOptionList = productInfo.getProductOptions()
                .stream()
                .map(productOption -> {
                    Inventory inventory = inventoryService.retrieveInventory(productOption);
                    productOption.setInventory(inventory);
                    return productOption;
                })
                .collect(Collectors.toList());
* Somar em um Long todos os campos de uma lista
Long soma = combinedResult.stream().mapToLong(VacancyDto::getCountVacancies).sum();
